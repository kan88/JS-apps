// Делегирование событий — это подход, который сокращает количество однотипных обработчиков в коде.

// Разберёмся на примере. Представим, что наша задача звучит так: обрабатывать клик на каждом элементе списка одинаковым обработчиком. Можно пройтись по каждому элементу и добавить обработчики:

// <ul>
//   <li>...</li> <!-- onListItemClick() -->
//   <li>...</li> <!-- onListItemClick() -->
//   <li>...</li> <!-- onListItemClick() -->
//   <li>...</li> <!-- onListItemClick() -->
//   <li>...</li> <!-- onListItemClick() -->
// </ul>
// script.js
const onListItemClick = function (evt) {
  // Действия
}
// // 

// Делегирование
// Вместо добавления одинаковых обработчиков на каждый элемент списка, добавим один обработчик на родительском элементе, то есть родителю делегируется (поручается) обработка событий его дочерних элементов:

// <ul> <!-- onListClick() -->
//   <li>...</li> 
//   <li>...</li> 
//   <li>...</li> 
//   <li>...</li> 
//   <li>...</li>
// </ul>
// script.js
const onListClick = function (evt) {
  if (evt.target.nodeName === 'LI') {
    // Действия
  }
}
// Как это работает
// В момент клика на элементе li, ссылка на него записывается в свойство target интерфейса Event
// Начинается стадия всплытия
// Всплытие доходит и срабатывает на ul. Обработчик проверяет, является ли evt.target элементом списка и выполняет код.
