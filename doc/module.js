Модульная область видимости
Это область видимости, создаваемая модулем. Модуль — это JS-файл (или тег <script>), 
написанный и подключаемый по особым правилам.
 О модулях мы ещё поговорим отдельно. Пока достаточно знать, что обычный 
 JS-код становится модульным, если при подключении указать атрибут type="module".

Ещё раз, если скрипт подключён как модуль, то все переменные и функции, 
объявленные в этом модуле, в глобальную область видимости не попадают. 
При этом переменные из глобальной области видимости модулю доступны.

В область видимости модуля попадают переменные и функции, объявленные
 «прямо в JS-модуле» (или в теге <script>-модуле). Возьмём ранее рассмотренный пример и немного его изменим:

 Затенение переменных
Когда браузер читает JavaScript-код и встречает переменную, он ищет её объявление снизу вверх.
 То есть сперва в той области, где встретил переменную, а потом вверх по иерархии. 
 FЕсли вплоть до глобальной области видимости переменная будет не найдена, то выполнение прервётся ошибкой ReferenceError:

 function log () {
    if (2 > 1) {
      console.log(mascot);
    }
  }
  
  log(); // ReferenceError: mascot is not defined
  Чтобы вывести в консоль переменную mascot, JavaScript сперва поищет её в блоке кода if, затем в блоке функции log(), после в модульной области видимости (если файл — модуль) и в конце концов в глобальной области видимости, где тоже переменную не найдёт. Тут и случится ошибка.
  
  Благодаря такому механизму поиска в областях разного уровня вложенности можно использовать переменные с одним и тем же именем:
  
  function log () {
    const mascot = 'Кекс';
    console.log(mascot); // "Кекс"
  
    if (2 > 1) {
      const mascot = 'Борис';
      console.log(mascot); // "Борис"
    }
  }
  
  log();